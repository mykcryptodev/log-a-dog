// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")

    // Do not use foreign keys (PlanetScale does not support them)
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    username      String?
    accounts      Account[]
    sessions      Session[]
    address       String?
    fid           Int?
    dogEvents     DogEvent[]
    notificationsEnabled Boolean? @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model DogEvent {
    id                String   @id @default(cuid())
    // Blockchain data
    chainId           String
    transactionHash   String   @unique // Ensures no duplicate events
    address           String
    blockTimestamp    BigInt

    
    logId             String
    logger            String
    eater             String
    imageUri          String
    metadataUri       String?
    timestamp         BigInt
    zoraCoin          String
    
    webhookId         String   @unique // The 'id' field from webhook payload
    
    attestationResolved     Boolean?  @default(false)
    attestationValid        Boolean?
    attestationTotalValidStake    String?
    attestationTotalInvalidStake  String?
    attestationResolvedAt   DateTime?
    attestationTransactionHash    String?
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    user              User?    @relation(fields: [userId], references: [id])
    userId            String?
    
    @@index([transactionHash])
    @@index([eater])
    @@index([userId])
}
