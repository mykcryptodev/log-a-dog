// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                 String               @id @default(cuid())
    name               String?
    email              String?              @unique
    emailVerified      DateTime?
    address            String               @unique
    image              String?
    isAdmin            Boolean              @default(false)
    accounts           Account[]
    sessions           Session[]
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    Profile            Profile?
    ProfileUserLike    ProfileUserLike[]
    ProfileUserFollows ProfileUserFollows[]
    Report             Report[]
    EntryLikes         LikeEntry[]
    ContestsCreated    Contest[]
    UserContest        UserContest[]
    Entries            Entry[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id                 String               @id @default(cuid())
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             String               @unique
    bio                String?
    twitter            String?
    discord            String?
    instagram          String?
    name               String?              @unique
    banner             String?
    img                String?
    views              Int                  @default(0)
    isCensored         Boolean?             @default(false)
    ProfileUserLike    ProfileUserLike[]
    ProfileUserFollows ProfileUserFollows[]
    Report             Report[]
}

model ProfileUserLike {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String

    @@unique([userId, profileId])
    @@index([profileId])
}

model ProfileUserFollows {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String

    @@unique([userId, profileId])
    @@index([profileId])
}

enum ReportType {
    PROFILE
}

enum ReportStatus {
    PENDING
    APPROVED
    REJECTED
}

model Report {
    id          String       @id @default(cuid())
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    createdBy   User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String
    reason      String
    status      ReportStatus
    type        ReportType
    contentId   String
    profile     Profile?     @relation(fields: [profileId], references: [id])
    profileId   String?

    @@index([createdById])
    @@index([profileId])
}

model Contest {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    createdBy   User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String
    name        String
    description String
    slug        String        @unique
    start       DateTime
    end         DateTime
    entries     Entry[]
    UserContest UserContest[]

    @@index([createdById])
}

model UserContest {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
    contestId String

    @@unique([userId, contestId])
    @@index([contestId])
}

model Entry {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    amount      Int
    image       String
    contest     Contest     @relation(fields: [contestId], references: [id], onDelete: Cascade)
    contestId   String
    likes       LikeEntry[]
    createdBy   User        @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    @@index([contestId])
    @@index([createdById])
}

model LikeEntry {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    entry     Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
    entryId   String

    @@unique([userId, entryId])
    @@index([entryId])
}
